// Generated by gencpp from file vrep_common/simRosCallScriptFunctionResponse.msg
// DO NOT EDIT!


#ifndef VREP_COMMON_MESSAGE_SIMROSCALLSCRIPTFUNCTIONRESPONSE_H
#define VREP_COMMON_MESSAGE_SIMROSCALLSCRIPTFUNCTIONRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace vrep_common
{
template <class ContainerAllocator>
struct simRosCallScriptFunctionResponse_
{
  typedef simRosCallScriptFunctionResponse_<ContainerAllocator> Type;

  simRosCallScriptFunctionResponse_()
    : result(0)
    , outputInts()
    , outputFloats()
    , outputStrings()
    , outputBuffer()  {
    }
  simRosCallScriptFunctionResponse_(const ContainerAllocator& _alloc)
    : result(0)
    , outputInts(_alloc)
    , outputFloats(_alloc)
    , outputStrings(_alloc)
    , outputBuffer(_alloc)  {
  (void)_alloc;
    }



   typedef int32_t _result_type;
  _result_type result;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _outputInts_type;
  _outputInts_type outputInts;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _outputFloats_type;
  _outputFloats_type outputFloats;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _outputStrings_type;
  _outputStrings_type outputStrings;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _outputBuffer_type;
  _outputBuffer_type outputBuffer;





  typedef boost::shared_ptr< ::vrep_common::simRosCallScriptFunctionResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::vrep_common::simRosCallScriptFunctionResponse_<ContainerAllocator> const> ConstPtr;

}; // struct simRosCallScriptFunctionResponse_

typedef ::vrep_common::simRosCallScriptFunctionResponse_<std::allocator<void> > simRosCallScriptFunctionResponse;

typedef boost::shared_ptr< ::vrep_common::simRosCallScriptFunctionResponse > simRosCallScriptFunctionResponsePtr;
typedef boost::shared_ptr< ::vrep_common::simRosCallScriptFunctionResponse const> simRosCallScriptFunctionResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::vrep_common::simRosCallScriptFunctionResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::vrep_common::simRosCallScriptFunctionResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace vrep_common

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'vrep_common': ['/home/alpsark/ros-ws/src/vrep_stack/vrep_common/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::vrep_common::simRosCallScriptFunctionResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::vrep_common::simRosCallScriptFunctionResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::vrep_common::simRosCallScriptFunctionResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::vrep_common::simRosCallScriptFunctionResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vrep_common::simRosCallScriptFunctionResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vrep_common::simRosCallScriptFunctionResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::vrep_common::simRosCallScriptFunctionResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e480f0a77cf736301c4dc7f71265e882";
  }

  static const char* value(const ::vrep_common::simRosCallScriptFunctionResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe480f0a77cf73630ULL;
  static const uint64_t static_value2 = 0x1c4dc7f71265e882ULL;
};

template<class ContainerAllocator>
struct DataType< ::vrep_common::simRosCallScriptFunctionResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "vrep_common/simRosCallScriptFunctionResponse";
  }

  static const char* value(const ::vrep_common::simRosCallScriptFunctionResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::vrep_common::simRosCallScriptFunctionResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 result\n\
int32[] outputInts\n\
float32[] outputFloats\n\
string[] outputStrings\n\
string outputBuffer\n\
\n\
";
  }

  static const char* value(const ::vrep_common::simRosCallScriptFunctionResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::vrep_common::simRosCallScriptFunctionResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.result);
      stream.next(m.outputInts);
      stream.next(m.outputFloats);
      stream.next(m.outputStrings);
      stream.next(m.outputBuffer);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct simRosCallScriptFunctionResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::vrep_common::simRosCallScriptFunctionResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::vrep_common::simRosCallScriptFunctionResponse_<ContainerAllocator>& v)
  {
    s << indent << "result: ";
    Printer<int32_t>::stream(s, indent + "  ", v.result);
    s << indent << "outputInts[]" << std::endl;
    for (size_t i = 0; i < v.outputInts.size(); ++i)
    {
      s << indent << "  outputInts[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.outputInts[i]);
    }
    s << indent << "outputFloats[]" << std::endl;
    for (size_t i = 0; i < v.outputFloats.size(); ++i)
    {
      s << indent << "  outputFloats[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.outputFloats[i]);
    }
    s << indent << "outputStrings[]" << std::endl;
    for (size_t i = 0; i < v.outputStrings.size(); ++i)
    {
      s << indent << "  outputStrings[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.outputStrings[i]);
    }
    s << indent << "outputBuffer: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.outputBuffer);
  }
};

} // namespace message_operations
} // namespace ros

#endif // VREP_COMMON_MESSAGE_SIMROSCALLSCRIPTFUNCTIONRESPONSE_H
